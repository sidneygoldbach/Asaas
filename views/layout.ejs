<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Sistema de Administração de Imóveis' %></title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Chart.js para gráficos -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Font Awesome para ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Moment.js para manipulação de datas -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/pt-br.min.js"></script>
    
    <style>
        .sidebar-transition {
            transition: transform 0.3s ease-in-out;
        }
        
        .content-transition {
            transition: margin-left 0.3s ease-in-out;
        }
        
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }
            
            .sidebar.open {
                transform: translateX(0);
            }
        }
        
        .card-hover {
            transition: all 0.3s ease;
        }
        
        .card-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .status-badge {
            @apply px-2 py-1 rounded-full text-xs font-medium;
        }
        
        .status-received {
            @apply bg-green-100 text-green-800;
        }
        
        .status-pending {
            @apply bg-yellow-100 text-yellow-800;
        }
        
        .status-overdue {
            @apply bg-red-100 text-red-800;
        }
        
        .status-confirmed {
            @apply bg-blue-100 text-blue-800;
        }
        
        .loading {
            @apply animate-pulse;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Sidebar -->
    <div id="sidebar" class="sidebar sidebar-transition fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg md:translate-x-0">
        <div class="flex items-center justify-between h-16 px-6 bg-blue-600">
            <h1 class="text-white text-lg font-semibold">
                <i class="fas fa-building mr-2"></i>
                Imóveis Admin
            </h1>
            <button id="closeSidebar" class="text-white md:hidden">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <nav class="mt-6">
            <div class="px-6 mb-4">
                <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Menu Principal</h3>
            </div>
            
            <a href="/" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-tachometer-alt mr-3"></i>
                Dashboard
            </a>
            
            <a href="/clientes" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-users mr-3"></i>
                Clientes/Inquilinos
            </a>
            
            <a href="/imoveis" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-home mr-3"></i>
                Imóveis
            </a>
            
            <a href="/contratos" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-file-contract mr-3"></i>
                Contratos
            </a>
            
            <a href="/cobrancas" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-file-invoice-dollar mr-3"></i>
                Cobranças
            </a>
            
            <a href="/financeiro" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-wallet mr-3"></i>
                Meu Dinheiro
            </a>
            
            <div class="px-6 mt-6 mb-4">
                <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Relatórios</h3>
            </div>
            
            <a href="/relatorios" class="nav-link flex items-center px-6 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                <i class="fas fa-chart-bar mr-3"></i>
                Relatórios Gerais
            </a>
        </nav>
        
        <div class="absolute bottom-0 w-full p-6">
            <div class="bg-gray-100 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                        <i class="fas fa-user text-white text-sm"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">Administrador</p>
                        <p class="text-xs text-gray-500">Sistema Asaas</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Overlay para mobile -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden md:hidden"></div>
    
    <!-- Conteúdo principal -->
    <div id="mainContent" class="content-transition md:ml-64">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b border-gray-200">
            <div class="flex items-center justify-between h-16 px-6">
                <div class="flex items-center">
                    <button id="openSidebar" class="text-gray-500 hover:text-gray-700 md:hidden">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                    <h2 class="ml-4 text-xl font-semibold text-gray-900 md:ml-0">
                        <%= title || 'Dashboard' %>
                    </h2>
                </div>
                
                <div class="flex items-center space-x-4">
                    <!-- Indicador de status da API -->
                    <div id="apiStatus" class="flex items-center">
                        <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-sm text-gray-600">API Conectada</span>
                    </div>
                    
                    <!-- Notificações -->
                    <button class="relative text-gray-500 hover:text-gray-700">
                        <i class="fas fa-bell text-xl"></i>
                        <span class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">3</span>
                    </button>
                </div>
            </div>
        </header>
        
        <!-- Conteúdo da página -->
        <main class="p-6">
            <%- body %>
        </main>
    </div>
    
    <!-- Modal de loading -->
    <div id="loadingModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 flex items-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-4"></div>
            <span class="text-gray-700">Carregando...</span>
        </div>
    </div>
    
    <!-- Toast notifications -->
    <div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>
    
    <script>
        // Configurar moment.js para português
        moment.locale('pt-br');
        
        // Controle da sidebar
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');
        const openSidebar = document.getElementById('openSidebar');
        const closeSidebar = document.getElementById('closeSidebar');
        
        openSidebar?.addEventListener('click', () => {
            sidebar.classList.add('open');
            overlay.classList.remove('hidden');
        });
        
        closeSidebar?.addEventListener('click', () => {
            sidebar.classList.remove('open');
            overlay.classList.add('hidden');
        });
        
        overlay?.addEventListener('click', () => {
            sidebar.classList.remove('open');
            overlay.classList.add('hidden');
        });
        
        // Destacar link ativo na navegação
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('.nav-link');
        
        navLinks.forEach(link => {
            if (link.getAttribute('href') === currentPath || 
                (currentPath !== '/' && link.getAttribute('href') !== '/' && currentPath.startsWith(link.getAttribute('href')))) {
                link.classList.add('bg-blue-50', 'text-blue-600', 'border-r-2', 'border-blue-600');
            }
        });
        
        // Funções utilitárias
        window.utils = {
            // Formatar valor monetário
            formatCurrency: (value) => {
                return new Intl.NumberFormat('pt-BR', {
                    style: 'currency',
                    currency: 'BRL'
                }).format(value);
            },
            
            // Formatar data
            formatDate: (date, format = 'DD/MM/YYYY') => {
                return moment(date).format(format);
            },
            
            // Mostrar loading
            showLoading: () => {
                document.getElementById('loadingModal').classList.remove('hidden');
            },
            
            // Esconder loading
            hideLoading: () => {
                document.getElementById('loadingModal').classList.add('hidden');
            },
            
            // Mostrar toast
            showToast: (message, type = 'info') => {
                const toast = document.createElement('div');
                const colors = {
                    success: 'bg-green-500',
                    error: 'bg-red-500',
                    warning: 'bg-yellow-500',
                    info: 'bg-blue-500'
                };
                
                toast.className = `${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full`;
                toast.innerHTML = `
                    <div class="flex items-center">
                        <span>${message}</span>
                        <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                document.getElementById('toastContainer').appendChild(toast);
                
                // Animar entrada
                setTimeout(() => {
                    toast.classList.remove('translate-x-full');
                }, 100);
                
                // Remover automaticamente após 5 segundos
                setTimeout(() => {
                    toast.classList.add('translate-x-full');
                    setTimeout(() => toast.remove(), 300);
                }, 5000);
            },
            
            // Fazer requisição AJAX
            request: async (url, options = {}) => {
                try {
                    const response = await fetch(url, {
                        headers: {
                            'Content-Type': 'application/json',
                            ...options.headers
                        },
                        ...options
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.error || 'Erro na requisição');
                    }
                    
                    return data;
                } catch (error) {
                    console.error('Erro na requisição:', error);
                    throw error;
                }
            },
            
            // Obter classe CSS para status
            getStatusClass: (status) => {
                const classes = {
                    'RECEIVED': 'status-received',
                    'PENDING': 'status-pending',
                    'OVERDUE': 'status-overdue',
                    'CONFIRMED': 'status-confirmed'
                };
                return classes[status] || 'bg-gray-100 text-gray-800';
            },
            
            // Obter texto para status
            getStatusText: (status) => {
                const texts = {
                    'RECEIVED': 'Recebido',
                    'PENDING': 'Pendente',
                    'OVERDUE': 'Vencido',
                    'CONFIRMED': 'Confirmado'
                };
                return texts[status] || status;
            }
        };
        
        // Verificar status da API periodicamente
        setInterval(async () => {
            try {
                const response = await fetch('/api/status');
                const statusElement = document.getElementById('apiStatus');
                
                if (response.ok) {
                    statusElement.innerHTML = `
                        <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-sm text-gray-600">API Conectada</span>
                    `;
                } else {
                    statusElement.innerHTML = `
                        <div class="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
                        <span class="text-sm text-gray-600">API Desconectada</span>
                    `;
                }
            } catch (error) {
                const statusElement = document.getElementById('apiStatus');
                statusElement.innerHTML = `
                    <div class="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
                    <span class="text-sm text-gray-600">API Desconectada</span>
                `;
            }
        }, 30000); // Verificar a cada 30 segundos
    </script>
</body>
</html>